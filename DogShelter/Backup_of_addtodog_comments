/*
addToDog(string str)
Precondition: A string containing the data to be stored within the Dog class
Postcondition: Creates a new object of class Dog and then return it.
(this does not work right now because Dog.h has to be implemented)

Notes: temporary not meant for linked list
This code was written by Sam Song and then adapted for linked lists/ binary search tree
*/

int addToDog(string str)
{
	int segmentNo = 0;
	string temp = "";
	string segment[7];
	//Dog aDog; //not working for some reason because no default constructor implemented
	map<char, int> ignore; //0 = ignore character, 1 = end of segment, 2 stop reading
	ignore['<'] = 0;
	ignore['>'] = 2;
	//ignore['\r'] = 2; // '\r' is the end-of-line character
	ignore['.'] = 2; // '\r' is the end-of-line character
	ignore['/'] = 2;
	ignore[','] = 1;
	for (int i = 0; i < str.length(); i++)
	{
		char ch = str.at(i);

		//cout << "ignore count is" << ignore.count(ch) << endl;
		if (ignore.count(ch) < 1)
		{
			temp += ch;
			//cout << "adding " << ch << "	";
		} //adds char to temporary string for that particular segment
		else
		{
			int instruction = ignore.find(ch)->second;
			switch (instruction)
			{
			case 0:	//ignores that particular character.
				break;
			case 1:	//moves onto next segment.
//				cout << temp << endl;
				segment[segmentNo] = temp;
				segmentNo++;
//				cout << "Segment has been successfully added." << endl;
				temp = ""; //empties temp
				//aDog.addData(temp);
				break;
			case 2:
//				cout << "case 2: " << temp << endl;
//				cout << "Segment has been successfully added." << endl;
				segment[segmentNo] = temp;
				//segmentNo++;
			}
		}
	}
	// later will override ostream of Dog to print out this part;
	string partsOfDog[] = { "ID", "Name", "Gender", "Age", "Breed", "Description", "extra?" };
	cout << "Finished reading in dog with " << endl;
	for (int i = 0; i < 6; i++)
		cout << partsOfDog[i] << ": " << segment[i] << endl;
	cout << endl;
	return 0;
}
